{
  "api/Post.API.Configurations.MapperConfig.html": {
    "href": "api/Post.API.Configurations.MapperConfig.html",
    "title": "Class MapperConfig | back_blog_post_manager",
    "keywords": "Class MapperConfig Namespace Post.API.Configurations Assembly Post.API.dll public class MapperConfig : Profile, IProfileExpression, IProfileConfiguration Inheritance object Profile MapperConfig Implements IProfileExpression IProfileConfiguration Inherited Members Profile.DisableConstructorMapping() Profile.CreateProjection<TSource, TDestination>() Profile.CreateProjection<TSource, TDestination>(MemberList) Profile.CreateMap<TSource, TDestination>() Profile.CreateMap<TSource, TDestination>(MemberList) Profile.CreateMap(Type, Type) Profile.CreateMap(Type, Type, MemberList) Profile.ClearPrefixes() Profile.ReplaceMemberName(string, string) Profile.RecognizePrefixes(params string[]) Profile.RecognizePostfixes(params string[]) Profile.RecognizeDestinationPrefixes(params string[]) Profile.RecognizeDestinationPostfixes(params string[]) Profile.AddGlobalIgnore(string) Profile.IncludeSourceExtensionMethods(Type) Profile.ProfileName Profile.AllowNullDestinationValues Profile.AllowNullCollections Profile.ShouldMapProperty Profile.ShouldMapField Profile.ShouldMapMethod Profile.ShouldUseConstructor Profile.SourceMemberNamingConvention Profile.DestinationMemberNamingConvention Profile.ValueTransformers object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MapperConfig() public MapperConfig()"
  },
  "api/Post.API.Configurations.html": {
    "href": "api/Post.API.Configurations.html",
    "title": "Namespace Post.API.Configurations | back_blog_post_manager",
    "keywords": "Namespace Post.API.Configurations Classes MapperConfig"
  },
  "api/Post.API.Contracts.IGenericManager-1.html": {
    "href": "api/Post.API.Contracts.IGenericManager-1.html",
    "title": "Interface IGenericManager<T> | back_blog_post_manager",
    "keywords": "Interface IGenericManager<T> Namespace Post.API.Contracts Assembly Post.API.dll public interface IGenericManager<T> where T : class Type Parameters T Methods AddAsync(T) Task<T> AddAsync(T entity) Parameters entity T Returns Task<T> DeleteAsync(int) Task DeleteAsync(int id) Parameters id int Returns Task Exists(int) Task<bool> Exists(int id) Parameters id int Returns Task<bool> GetAllAsync() Task<List<T>> GetAllAsync() Returns Task<List<T>> GetAsync(int?) Task<T> GetAsync(int? id) Parameters id int? Returns Task<T> UpdateAsync(T) Task UpdateAsync(T entity) Parameters entity T Returns Task"
  },
  "api/Post.API.Contracts.IPostRepository.html": {
    "href": "api/Post.API.Contracts.IPostRepository.html",
    "title": "Interface IPostRepository | back_blog_post_manager",
    "keywords": "Interface IPostRepository Namespace Post.API.Contracts Assembly Post.API.dll public interface IPostRepository Methods CreatePost(CreatePostDto, string) Task<PostResponse> CreatePost(CreatePostDto postDto, string userId) Parameters postDto CreatePostDto userId string Returns Task<PostResponse> DeletePost(int, string) Task<BaseResponse> DeletePost(int id, string userId) Parameters id int userId string Returns Task<BaseResponse> GetAllPosts(string?, PostStatus?) Task<PostsResponse> GetAllPosts(string? userId = null, PostStatus? status = null) Parameters userId string status PostStatus? Returns Task<PostsResponse> GetPostById(int) Task<PostResponse> GetPostById(int id) Parameters id int Returns Task<PostResponse> GetPostsByTag(string) Task<PostsResponse> GetPostsByTag(string tag) Parameters tag string Returns Task<PostsResponse> IncrementViewCount(int) Task<bool> IncrementViewCount(int id) Parameters id int Returns Task<bool> SearchPosts(string) Task<PostsResponse> SearchPosts(string searchTerm) Parameters searchTerm string Returns Task<PostsResponse> UpdatePost(int, UpdatePostDto, string) Task<PostResponse> UpdatePost(int id, UpdatePostDto postDto, string userId) Parameters id int postDto UpdatePostDto userId string Returns Task<PostResponse>"
  },
  "api/Post.API.Contracts.html": {
    "href": "api/Post.API.Contracts.html",
    "title": "Namespace Post.API.Contracts | back_blog_post_manager",
    "keywords": "Namespace Post.API.Contracts Interfaces IGenericManager<T> IPostRepository"
  },
  "api/Post.API.Controllers.PostController.html": {
    "href": "api/Post.API.Controllers.PostController.html",
    "title": "Class PostController | back_blog_post_manager",
    "keywords": "Class PostController Namespace Post.API.Controllers Assembly Post.API.dll Controller to manage posts. [ApiController] [Route(\"api/[controller]\")] [Authorize] public class PostController : ControllerBase Inheritance object ControllerBase PostController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostController(IPostRepository, ILogger<PostController>) Initializes a new instance of the PostController class. public PostController(IPostRepository postRepository, ILogger<PostController> logger) Parameters postRepository IPostRepository The repository for managing posts. logger ILogger<PostController> The logger instance for logging information. Methods CreatePost(CreatePostDto) Creates a new post. [HttpPost] public Task<ActionResult<PostResponse>> CreatePost(CreatePostDto postDto) Parameters postDto CreatePostDto The post data transfer object. Returns Task<ActionResult<PostResponse>> The response containing the created post. DeletePost(int) Deletes a post. [HttpDelete(\"{id}\")] public Task<ActionResult<BaseResponse>> DeletePost(int id) Parameters id int The ID of the post to delete. Returns Task<ActionResult<BaseResponse>> The response indicating the deletion status. GetAllPosts(PostStatus?) Retrieves all posts for the authenticated user. [HttpGet] public Task<ActionResult<PostsResponse>> GetAllPosts(PostStatus? status) Parameters status PostStatus? The optional status filter for the posts. Returns Task<ActionResult<PostsResponse>> A list of posts matching the criteria. GetPost(int) Retrieves a specific post by its ID. [HttpGet(\"{id}\")] public Task<ActionResult<PostResponse>> GetPost(int id) Parameters id int The ID of the post to retrieve. Returns Task<ActionResult<PostResponse>> The requested post, if found. UpdatePost(int, UpdatePostDto) Updates an existing post. [HttpPut(\"{id}\")] public Task<ActionResult<PostResponse>> UpdatePost(int id, UpdatePostDto postDto) Parameters id int The ID of the post to update. postDto UpdatePostDto The updated post data. Returns Task<ActionResult<PostResponse>> The response containing the updated post."
  },
  "api/Post.API.Controllers.html": {
    "href": "api/Post.API.Controllers.html",
    "title": "Namespace Post.API.Controllers | back_blog_post_manager",
    "keywords": "Namespace Post.API.Controllers Classes PostController Controller to manage posts."
  },
  "api/Post.API.Data.Configuration.PostConfiguration.html": {
    "href": "api/Post.API.Data.Configuration.PostConfiguration.html",
    "title": "Class PostConfiguration | back_blog_post_manager",
    "keywords": "Class PostConfiguration Namespace Post.API.Data.Configuration Assembly Post.API.dll public class PostConfiguration : IEntityTypeConfiguration<Post> Inheritance object PostConfiguration Implements IEntityTypeConfiguration<Post> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<Post>) Configures the entity of type Post. public void Configure(EntityTypeBuilder<Post> builder) Parameters builder EntityTypeBuilder<Post> The builder to be used to configure the entity type."
  },
  "api/Post.API.Data.Configuration.html": {
    "href": "api/Post.API.Data.Configuration.html",
    "title": "Namespace Post.API.Data.Configuration | back_blog_post_manager",
    "keywords": "Namespace Post.API.Data.Configuration Classes PostConfiguration"
  },
  "api/Post.API.Data.Post.html": {
    "href": "api/Post.API.Data.Post.html",
    "title": "Class Post | back_blog_post_manager",
    "keywords": "Class Post Namespace Post.API.Data Assembly Post.API.dll public class Post Inheritance object Post Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime CreatedBy [Required] public string CreatedBy { get; set; } Property Value string Description [Required] public string Description { get; set; } Property Value string Excerpt [StringLength(200)] public string? Excerpt { get; set; } Property Value string FeaturedImageUrl public string? FeaturedImageUrl { get; set; } Property Value string Id public int Id { get; set; } Property Value int IsPublished public bool IsPublished { get; set; } Property Value bool LastModifiedAt public DateTime? LastModifiedAt { get; set; } Property Value DateTime? LastModifiedBy public string? LastModifiedBy { get; set; } Property Value string PublishedAt public DateTime? PublishedAt { get; set; } Property Value DateTime? Status public PostStatus Status { get; set; } Property Value PostStatus Tags [MaxLength(10)] public List<string> Tags { get; set; } Property Value List<string> Title [Required] [StringLength(200, MinimumLength = 3)] public string Title { get; set; } Property Value string ViewCount public int ViewCount { get; set; } Property Value int"
  },
  "api/Post.API.Data.PostDbContext.html": {
    "href": "api/Post.API.Data.PostDbContext.html",
    "title": "Class PostDbContext | back_blog_post_manager",
    "keywords": "Class PostDbContext Namespace Post.API.Data Assembly Post.API.dll public class PostDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext PostDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostDbContext(DbContextOptions) public PostDbContext(DbContextOptions options) Parameters options DbContextOptions Properties Posts public DbSet<Post> Posts { get; set; } Property Value DbSet<Post> Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/Post.API.Data.PostStatus.html": {
    "href": "api/Post.API.Data.PostStatus.html",
    "title": "Enum PostStatus | back_blog_post_manager",
    "keywords": "Enum PostStatus Namespace Post.API.Data Assembly Post.API.dll public enum PostStatus Fields Archived = 2 Draft = 0 Published = 1"
  },
  "api/Post.API.Data.html": {
    "href": "api/Post.API.Data.html",
    "title": "Namespace Post.API.Data | back_blog_post_manager",
    "keywords": "Namespace Post.API.Data Classes Post PostDbContext Enums PostStatus"
  },
  "api/Post.API.Migrations.InitialCreate.html": {
    "href": "api/Post.API.Migrations.InitialCreate.html",
    "title": "Class InitialCreate | back_blog_post_manager",
    "keywords": "Class InitialCreate Namespace Post.API.Migrations Assembly Post.API.dll A base class inherited by each EF Core migration. [DbContext(typeof(PostDbContext))] [Migration(\"20250208190314_InitialCreate\")] public class InitialCreate : Migration Inheritance object Migration InitialCreate Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Post.API.Migrations.UpdatePostModel.html": {
    "href": "api/Post.API.Migrations.UpdatePostModel.html",
    "title": "Class UpdatePostModel | back_blog_post_manager",
    "keywords": "Class UpdatePostModel Namespace Post.API.Migrations Assembly Post.API.dll A base class inherited by each EF Core migration. [DbContext(typeof(PostDbContext))] [Migration(\"20250209160948_UpdatePostModel\")] public class UpdatePostModel : Migration Inheritance object Migration UpdatePostModel Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Post.API.Migrations.UpdateUserModel.html": {
    "href": "api/Post.API.Migrations.UpdateUserModel.html",
    "title": "Class UpdateUserModel | back_blog_post_manager",
    "keywords": "Class UpdateUserModel Namespace Post.API.Migrations Assembly Post.API.dll A base class inherited by each EF Core migration. [DbContext(typeof(PostDbContext))] [Migration(\"20250209161008_UpdateUserModel\")] public class UpdateUserModel : Migration Inheritance object Migration UpdateUserModel Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Post.API.Migrations.html": {
    "href": "api/Post.API.Migrations.html",
    "title": "Namespace Post.API.Migrations | back_blog_post_manager",
    "keywords": "Namespace Post.API.Migrations Classes InitialCreate A base class inherited by each EF Core migration. UpdatePostModel A base class inherited by each EF Core migration. UpdateUserModel A base class inherited by each EF Core migration. postsapi A base class inherited by each EF Core migration. test A base class inherited by each EF Core migration."
  },
  "api/Post.API.Migrations.postsapi.html": {
    "href": "api/Post.API.Migrations.postsapi.html",
    "title": "Class postsapi | back_blog_post_manager",
    "keywords": "Class postsapi Namespace Post.API.Migrations Assembly Post.API.dll A base class inherited by each EF Core migration. [DbContext(typeof(PostDbContext))] [Migration(\"20250208181412_posts api\")] public class postsapi : Migration Inheritance object Migration postsapi Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Post.API.Migrations.test.html": {
    "href": "api/Post.API.Migrations.test.html",
    "title": "Class test | back_blog_post_manager",
    "keywords": "Class test Namespace Post.API.Migrations Assembly Post.API.dll A base class inherited by each EF Core migration. [DbContext(typeof(PostDbContext))] [Migration(\"20250208201803_test\")] public class test : Migration Inheritance object Migration test Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Post.API.ModelDtos.BasePostDto.html": {
    "href": "api/Post.API.ModelDtos.BasePostDto.html",
    "title": "Class BasePostDto | back_blog_post_manager",
    "keywords": "Class BasePostDto Namespace Post.API.ModelDtos Assembly Post.API.dll public abstract class BasePostDto Inheritance object BasePostDto Derived CreatePostDto GetPostDto UpdatePostDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description [Required] public string Description { get; set; } Property Value string Excerpt public string? Excerpt { get; set; } Property Value string FeaturedImageUrl public string? FeaturedImageUrl { get; set; } Property Value string Tags public List<string>? Tags { get; set; } Property Value List<string> Title [Required] [StringLength(200)] public string Title { get; set; } Property Value string"
  },
  "api/Post.API.ModelDtos.BaseResponse.html": {
    "href": "api/Post.API.ModelDtos.BaseResponse.html",
    "title": "Class BaseResponse | back_blog_post_manager",
    "keywords": "Class BaseResponse Namespace Post.API.ModelDtos Assembly Post.API.dll public class BaseResponse Inheritance object BaseResponse Derived PostResponse PostsResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message public string Message { get; set; } Property Value string Success public bool Success { get; set; } Property Value bool"
  },
  "api/Post.API.ModelDtos.CreatePostDto.html": {
    "href": "api/Post.API.ModelDtos.CreatePostDto.html",
    "title": "Class CreatePostDto | back_blog_post_manager",
    "keywords": "Class CreatePostDto Namespace Post.API.ModelDtos Assembly Post.API.dll public class CreatePostDto : BasePostDto Inheritance object BasePostDto CreatePostDto Inherited Members BasePostDto.Title BasePostDto.Description BasePostDto.Tags BasePostDto.FeaturedImageUrl BasePostDto.Excerpt object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsPublished public bool IsPublished { get; set; } Property Value bool"
  },
  "api/Post.API.ModelDtos.GetPostDetailDto.html": {
    "href": "api/Post.API.ModelDtos.GetPostDetailDto.html",
    "title": "Class GetPostDetailDto | back_blog_post_manager",
    "keywords": "Class GetPostDetailDto Namespace Post.API.ModelDtos Assembly Post.API.dll public class GetPostDetailDto : GetPostDto Inheritance object BasePostDto GetPostDto GetPostDetailDto Inherited Members GetPostDto.Id GetPostDto.CreatedAt GetPostDto.CreatedBy GetPostDto.Status GetPostDto.ViewCount GetPostDto.IsPublished BasePostDto.Title BasePostDto.Description BasePostDto.Tags BasePostDto.FeaturedImageUrl BasePostDto.Excerpt object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LastModifiedAt public DateTime? LastModifiedAt { get; set; } Property Value DateTime? LastModifiedBy public string? LastModifiedBy { get; set; } Property Value string"
  },
  "api/Post.API.ModelDtos.GetPostDto.html": {
    "href": "api/Post.API.ModelDtos.GetPostDto.html",
    "title": "Class GetPostDto | back_blog_post_manager",
    "keywords": "Class GetPostDto Namespace Post.API.ModelDtos Assembly Post.API.dll public class GetPostDto : BasePostDto Inheritance object BasePostDto GetPostDto Derived GetPostDetailDto Inherited Members BasePostDto.Title BasePostDto.Description BasePostDto.Tags BasePostDto.FeaturedImageUrl BasePostDto.Excerpt object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime CreatedBy public string CreatedBy { get; set; } Property Value string Id public int Id { get; set; } Property Value int IsPublished public bool IsPublished { get; set; } Property Value bool Status public PostStatus Status { get; set; } Property Value PostStatus ViewCount public int ViewCount { get; set; } Property Value int"
  },
  "api/Post.API.ModelDtos.PostResponse.html": {
    "href": "api/Post.API.ModelDtos.PostResponse.html",
    "title": "Class PostResponse | back_blog_post_manager",
    "keywords": "Class PostResponse Namespace Post.API.ModelDtos Assembly Post.API.dll public class PostResponse : BaseResponse Inheritance object BaseResponse PostResponse Inherited Members BaseResponse.Success BaseResponse.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Post public GetPostDetailDto Post { get; set; } Property Value GetPostDetailDto"
  },
  "api/Post.API.ModelDtos.PostsResponse.html": {
    "href": "api/Post.API.ModelDtos.PostsResponse.html",
    "title": "Class PostsResponse | back_blog_post_manager",
    "keywords": "Class PostsResponse Namespace Post.API.ModelDtos Assembly Post.API.dll public class PostsResponse : BaseResponse Inheritance object BaseResponse PostsResponse Inherited Members BaseResponse.Success BaseResponse.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Posts public List<GetPostDto> Posts { get; set; } Property Value List<GetPostDto>"
  },
  "api/Post.API.ModelDtos.UpdatePostDto.html": {
    "href": "api/Post.API.ModelDtos.UpdatePostDto.html",
    "title": "Class UpdatePostDto | back_blog_post_manager",
    "keywords": "Class UpdatePostDto Namespace Post.API.ModelDtos Assembly Post.API.dll public class UpdatePostDto : BasePostDto Inheritance object BasePostDto UpdatePostDto Inherited Members BasePostDto.Title BasePostDto.Description BasePostDto.Tags BasePostDto.FeaturedImageUrl BasePostDto.Excerpt object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsPublished public bool IsPublished { get; set; } Property Value bool Status public PostStatus Status { get; set; } Property Value PostStatus"
  },
  "api/Post.API.ModelDtos.html": {
    "href": "api/Post.API.ModelDtos.html",
    "title": "Namespace Post.API.ModelDtos | back_blog_post_manager",
    "keywords": "Namespace Post.API.ModelDtos Classes BasePostDto BaseResponse CreatePostDto GetPostDetailDto GetPostDto PostResponse PostsResponse UpdatePostDto"
  },
  "api/Post.API.Repository.PostRepository.html": {
    "href": "api/Post.API.Repository.PostRepository.html",
    "title": "Class PostRepository | back_blog_post_manager",
    "keywords": "Class PostRepository Namespace Post.API.Repository Assembly Post.API.dll Repository implementation for managing posts. public class PostRepository : IPostRepository Inheritance object PostRepository Implements IPostRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostRepository(PostDbContext, IMapper, ILogger<PostRepository>) Initializes a new instance of the PostRepository class. public PostRepository(PostDbContext context, IMapper mapper, ILogger<PostRepository> logger) Parameters context PostDbContext The database context. mapper IMapper The mapper instance for DTO mapping. logger ILogger<PostRepository> The logger instance for logging operations. Methods CreatePost(CreatePostDto, string) Creates a new post in the database. public Task<PostResponse> CreatePost(CreatePostDto postDto, string userId) Parameters postDto CreatePostDto The data for the new post. userId string The ID of the user creating the post. Returns Task<PostResponse> A response containing the created post. DeletePost(int, string) Deletes a post by its ID. public Task<BaseResponse> DeletePost(int id, string userId) Parameters id int The ID of the post to delete. userId string The ID of the user deleting the post. Returns Task<BaseResponse> A response indicating the deletion status. GetAllPosts(string?, PostStatus?) Retrieves all posts, optionally filtered by user and/or status. public Task<PostsResponse> GetAllPosts(string? userId = null, PostStatus? status = null) Parameters userId string The ID of the user whose posts to retrieve (optional). status PostStatus? The status of posts to filter by (optional). Returns Task<PostsResponse> A response containing the list of posts. GetPostById(int) Retrieves a post by its ID. public Task<PostResponse> GetPostById(int id) Parameters id int The ID of the post to retrieve. Returns Task<PostResponse> A response containing the post details. GetPostsByTag(string) Retrieves posts associated with a specific tag. public Task<PostsResponse> GetPostsByTag(string tag) Parameters tag string The tag to filter posts by. Returns Task<PostsResponse> A response containing the posts with the specified tag. IncrementViewCount(int) Increments the view count for a specific post. public Task<bool> IncrementViewCount(int id) Parameters id int The ID of the post. Returns Task<bool> A boolean indicating whether the operation succeeded. SearchPosts(string) Searches posts by a term. public Task<PostsResponse> SearchPosts(string searchTerm) Parameters searchTerm string The term to search posts by. Returns Task<PostsResponse> A task representing the asynchronous operation. UpdatePost(int, UpdatePostDto, string) Updates an existing post. public Task<PostResponse> UpdatePost(int id, UpdatePostDto postDto, string userId) Parameters id int The ID of the post to update. postDto UpdatePostDto The data to update the post with. userId string The ID of the user updating the post. Returns Task<PostResponse> A response containing the updated post."
  },
  "api/Post.API.Repository.html": {
    "href": "api/Post.API.Repository.html",
    "title": "Namespace Post.API.Repository | back_blog_post_manager",
    "keywords": "Namespace Post.API.Repository Classes PostRepository Repository implementation for managing posts."
  },
  "api/User.API.Configurations.MapperConfig.html": {
    "href": "api/User.API.Configurations.MapperConfig.html",
    "title": "Class MapperConfig | back_blog_post_manager",
    "keywords": "Class MapperConfig Namespace User.API.Configurations Assembly User.API.dll Configures mappings between data models and DTOs. public class MapperConfig : Profile, IProfileExpression, IProfileConfiguration Inheritance object Profile MapperConfig Implements IProfileExpression IProfileConfiguration Inherited Members Profile.DisableConstructorMapping() Profile.CreateProjection<TSource, TDestination>() Profile.CreateProjection<TSource, TDestination>(MemberList) Profile.CreateMap<TSource, TDestination>() Profile.CreateMap<TSource, TDestination>(MemberList) Profile.CreateMap(Type, Type) Profile.CreateMap(Type, Type, MemberList) Profile.ClearPrefixes() Profile.ReplaceMemberName(string, string) Profile.RecognizePrefixes(params string[]) Profile.RecognizePostfixes(params string[]) Profile.RecognizeDestinationPrefixes(params string[]) Profile.RecognizeDestinationPostfixes(params string[]) Profile.AddGlobalIgnore(string) Profile.IncludeSourceExtensionMethods(Type) Profile.ProfileName Profile.AllowNullDestinationValues Profile.AllowNullCollections Profile.ShouldMapProperty Profile.ShouldMapField Profile.ShouldMapMethod Profile.ShouldUseConstructor Profile.SourceMemberNamingConvention Profile.DestinationMemberNamingConvention Profile.ValueTransformers object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MapperConfig() Initializes the mapper configuration. public MapperConfig()"
  },
  "api/User.API.Configurations.html": {
    "href": "api/User.API.Configurations.html",
    "title": "Namespace User.API.Configurations | back_blog_post_manager",
    "keywords": "Namespace User.API.Configurations Classes MapperConfig Configures mappings between data models and DTOs."
  },
  "api/User.API.Contracts.IAuthManager.html": {
    "href": "api/User.API.Contracts.IAuthManager.html",
    "title": "Interface IAuthManager | back_blog_post_manager",
    "keywords": "Interface IAuthManager Namespace User.API.Contracts Assembly User.API.dll Interface for authentication management. public interface IAuthManager Methods Login(AuthDto) Logs in a user. Task<AuthResponseDto> Login(AuthDto loginDto) Parameters loginDto AuthDto The login credentials. Returns Task<AuthResponseDto> An authentication response containing the user token. RefreshToken(string) Refreshes an expired authentication token. Task<AuthResponseDto> RefreshToken(string refreshToken) Parameters refreshToken string The refresh token. Returns Task<AuthResponseDto> An authentication response containing a new token. Register(RegisterDto) Registers a new user. Task<IEnumerable<IdentityError>> Register(RegisterDto registerDto) Parameters registerDto RegisterDto The user registration details. Returns Task<IEnumerable<IdentityError>> A list of identity errors, if any."
  },
  "api/User.API.Contracts.IGenericManager-1.html": {
    "href": "api/User.API.Contracts.IGenericManager-1.html",
    "title": "Interface IGenericManager<T> | back_blog_post_manager",
    "keywords": "Interface IGenericManager<T> Namespace User.API.Contracts Assembly User.API.dll public interface IGenericManager<T> where T : class Type Parameters T Methods AddAsync(T) Task<T> AddAsync(T entity) Parameters entity T Returns Task<T> DeleteAsync(int) Task DeleteAsync(int id) Parameters id int Returns Task Exists(int) Task<bool> Exists(int id) Parameters id int Returns Task<bool> GetAllAsync() Task<List<T>> GetAllAsync() Returns Task<List<T>> GetAsync(int?) Task<T> GetAsync(int? id) Parameters id int? Returns Task<T> UpdateAsync(T) Task UpdateAsync(T entity) Parameters entity T Returns Task"
  },
  "api/User.API.Contracts.html": {
    "href": "api/User.API.Contracts.html",
    "title": "Namespace User.API.Contracts | back_blog_post_manager",
    "keywords": "Namespace User.API.Contracts Interfaces IAuthManager Interface for authentication management. IGenericManager<T>"
  },
  "api/User.API.Controllers.AuthController.html": {
    "href": "api/User.API.Controllers.AuthController.html",
    "title": "Class AuthController | back_blog_post_manager",
    "keywords": "Class AuthController Namespace User.API.Controllers Assembly User.API.dll Controller for handling authentication-related operations. [ApiController] [Route(\"api/[controller]\")] public class AuthController : ControllerBase Inheritance object ControllerBase AuthController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthController(IAuthManager) Initializes a new instance of the AuthController class. public AuthController(IAuthManager authManager) Parameters authManager IAuthManager The authentication manager. Methods Login(AuthDto) Logs in a user. [HttpPost] [Route(\"login\")] [EnableRateLimiting(\"login\")] [ProducesResponseType(400)] [ProducesResponseType(500)] [ProducesResponseType(200)] public Task<ActionResult> Login(AuthDto loginDto) Parameters loginDto AuthDto The login credentials. Returns Task<ActionResult> A response containing the authentication token or an error message. Register(RegisterDto) Registers a new user. [HttpPost] [Route(\"register\")] [ProducesResponseType(400)] [ProducesResponseType(500)] [ProducesResponseType(200)] public Task<ActionResult> Register(RegisterDto registerDto) Parameters registerDto RegisterDto The user registration details. Returns Task<ActionResult> A response indicating success or failure."
  },
  "api/User.API.Controllers.html": {
    "href": "api/User.API.Controllers.html",
    "title": "Namespace User.API.Controllers | back_blog_post_manager",
    "keywords": "Namespace User.API.Controllers Classes AuthController Controller for handling authentication-related operations."
  },
  "api/User.API.Data.AuthResponseDto.html": {
    "href": "api/User.API.Data.AuthResponseDto.html",
    "title": "Class AuthResponseDto | back_blog_post_manager",
    "keywords": "Class AuthResponseDto Namespace User.API.Data Assembly User.API.dll public class AuthResponseDto Inheritance object AuthResponseDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Token public string Token { get; set; } Property Value string UserId public string UserId { get; set; } Property Value string"
  },
  "api/User.API.Data.UserApi.html": {
    "href": "api/User.API.Data.UserApi.html",
    "title": "Class UserApi | back_blog_post_manager",
    "keywords": "Class UserApi Namespace User.API.Data Assembly User.API.dll Represents a user in the authentication system. public class UserApi : IdentityUser Inheritance object IdentityUser<string> IdentityUser UserApi Inherited Members IdentityUser<string>.ToString() IdentityUser<string>.Id IdentityUser<string>.UserName IdentityUser<string>.NormalizedUserName IdentityUser<string>.Email IdentityUser<string>.NormalizedEmail IdentityUser<string>.EmailConfirmed IdentityUser<string>.PasswordHash IdentityUser<string>.SecurityStamp IdentityUser<string>.ConcurrencyStamp IdentityUser<string>.PhoneNumber IdentityUser<string>.PhoneNumberConfirmed IdentityUser<string>.TwoFactorEnabled IdentityUser<string>.LockoutEnd IdentityUser<string>.LockoutEnabled IdentityUser<string>.AccessFailedCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FirstName Gets or sets the first name of the user. [Required] public string FirstName { get; set; } Property Value string LastName Gets or sets the last name of the user. [Required] public string LastName { get; set; } Property Value string"
  },
  "api/User.API.Data.UserDbContext.html": {
    "href": "api/User.API.Data.UserDbContext.html",
    "title": "Class UserDbContext | back_blog_post_manager",
    "keywords": "Class UserDbContext Namespace User.API.Data Assembly User.API.dll Represents the database context for user authentication. public class UserDbContext : IdentityDbContext<UserApi>, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext IdentityUserContext<UserApi, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>> IdentityDbContext<UserApi, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>> IdentityDbContext<UserApi, IdentityRole, string> IdentityDbContext<UserApi> UserDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members IdentityDbContext<UserApi, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.OnModelCreating(ModelBuilder) IdentityDbContext<UserApi, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.UserRoles IdentityDbContext<UserApi, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.Roles IdentityDbContext<UserApi, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.RoleClaims IdentityUserContext<UserApi, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.OnModelCreating(ModelBuilder) IdentityUserContext<UserApi, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.Users IdentityUserContext<UserApi, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserClaims IdentityUserContext<UserApi, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserLogins IdentityUserContext<UserApi, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserTokens IdentityUserContext<UserApi, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.SchemaVersion DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserDbContext(DbContextOptions) Initializes a new instance of the UserDbContext class. public UserDbContext(DbContextOptions options) Parameters options DbContextOptions The database context options. Methods OnModelCreating(ModelBuilder) Configures the database model. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The model builder."
  },
  "api/User.API.Data.html": {
    "href": "api/User.API.Data.html",
    "title": "Namespace User.API.Data | back_blog_post_manager",
    "keywords": "Namespace User.API.Data Classes AuthResponseDto UserApi Represents a user in the authentication system. UserDbContext Represents the database context for user authentication."
  },
  "api/User.API.Migrations.html": {
    "href": "api/User.API.Migrations.html",
    "title": "Namespace User.API.Migrations | back_blog_post_manager",
    "keywords": "Namespace User.API.Migrations Classes test A base class inherited by each EF Core migration. userapi A base class inherited by each EF Core migration."
  },
  "api/User.API.Migrations.test.html": {
    "href": "api/User.API.Migrations.test.html",
    "title": "Class test | back_blog_post_manager",
    "keywords": "Class test Namespace User.API.Migrations Assembly User.API.dll A base class inherited by each EF Core migration. [DbContext(typeof(UserDbContext))] [Migration(\"20250209161056_test\")] public class test : Migration Inheritance object Migration test Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/User.API.Migrations.userapi.html": {
    "href": "api/User.API.Migrations.userapi.html",
    "title": "Class userapi | back_blog_post_manager",
    "keywords": "Class userapi Namespace User.API.Migrations Assembly User.API.dll A base class inherited by each EF Core migration. [DbContext(typeof(UserDbContext))] [Migration(\"20250208165832_user api\")] public class userapi : Migration Inheritance object Migration userapi Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/User.API.ModelDtos.AuthDto.html": {
    "href": "api/User.API.ModelDtos.AuthDto.html",
    "title": "Class AuthDto | back_blog_post_manager",
    "keywords": "Class AuthDto Namespace User.API.ModelDtos Assembly User.API.dll public class AuthDto Inheritance object AuthDto Derived RegisterDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email [Required] [EmailAddress] public string Email { get; set; } Property Value string Password [Required] [StringLength(15, ErrorMessage = \"Your password must be between 6 and 15 characters long.\")] public string Password { get; set; } Property Value string"
  },
  "api/User.API.ModelDtos.RegisterDto.html": {
    "href": "api/User.API.ModelDtos.RegisterDto.html",
    "title": "Class RegisterDto | back_blog_post_manager",
    "keywords": "Class RegisterDto Namespace User.API.ModelDtos Assembly User.API.dll public class RegisterDto : AuthDto Inheritance object AuthDto RegisterDto Inherited Members AuthDto.Email AuthDto.Password object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FirstName [Required] public string FirstName { get; set; } Property Value string LastName [Required] public string LastName { get; set; } Property Value string UserName [Required] public string UserName { get; set; } Property Value string"
  },
  "api/User.API.ModelDtos.html": {
    "href": "api/User.API.ModelDtos.html",
    "title": "Namespace User.API.ModelDtos | back_blog_post_manager",
    "keywords": "Namespace User.API.ModelDtos Classes AuthDto RegisterDto"
  },
  "api/User.API.Repository.AuthRepository.html": {
    "href": "api/User.API.Repository.AuthRepository.html",
    "title": "Class AuthRepository | back_blog_post_manager",
    "keywords": "Class AuthRepository Namespace User.API.Repository Assembly User.API.dll Repository for handling authentication operations. public class AuthRepository : IAuthManager Inheritance object AuthRepository Implements IAuthManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthRepository(UserManager<UserApi>, IMapper, IConfiguration) public AuthRepository(UserManager<UserApi> userManager, IMapper mapper, IConfiguration configuration) Parameters userManager UserManager<UserApi> mapper IMapper configuration IConfiguration Methods Login(AuthDto) Logs in a user and generates a JWT token. public Task<AuthResponseDto> Login(AuthDto loginDto) Parameters loginDto AuthDto The login details. Returns Task<AuthResponseDto> The authentication response with a token. RefreshToken(string) Refreshes a token (not implemented). public Task<AuthResponseDto> RefreshToken(string refreshToken) Parameters refreshToken string The refresh token. Returns Task<AuthResponseDto> A refreshed authentication token. Register(RegisterDto) Registers a new user. public Task<IEnumerable<IdentityError>> Register(RegisterDto registerDto) Parameters registerDto RegisterDto The registration details. Returns Task<IEnumerable<IdentityError>> A list of identity errors, if any."
  },
  "api/User.API.Repository.html": {
    "href": "api/User.API.Repository.html",
    "title": "Namespace User.API.Repository | back_blog_post_manager",
    "keywords": "Namespace User.API.Repository Classes AuthRepository Repository for handling authentication operations."
  },
  "index.html": {
    "href": "index.html",
    "title": "Back Blog Post Manager | back_blog_post_manager",
    "keywords": "Back Blog Post Manager A scalable microservices-based blog management system built with .NET 8.0. Key Features User authentication and management Blog post creation and management JWT-based security Docker containerization SQL Server database API documentation with Swagger Quick Links Getting Started Guide API Documentation Architecture Overview Project Structure ├── User.API # User management service ├── Post.API # Blog post management service └── docs # Documentation"
  }
}